
LAB_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000238c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002564  08002564  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08002564  08002564  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002564  08002564  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800256c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200001ec  08002758  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08002758  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fb8  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b8b  00000000  00000000  0002a1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002bd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffca  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a9b6  00000000  00000000  0004ceea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c13  00000000  00000000  000578a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b4b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002410  00000000  00000000  0011b504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	200001ec 	.word	0x200001ec
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002500 	.word	0x08002500

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	200001f0 	.word	0x200001f0
 80001c8:	08002500 	.word	0x08002500

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t C = 48;
 80001d2:	2330      	movs	r3, #48	; 0x30
 80001d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 f974 	bl	80004c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f81b 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001de:	f000 f87b 	bl	80002d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DOT_MATRIX_Init(&hspi1);
 80001e2:	480b      	ldr	r0, [pc, #44]	; (8000210 <main+0x44>)
 80001e4:	f001 fed8 	bl	8001f98 <DOT_MATRIX_Init>
  MATRIX_CLEAR(MATRIX_DISPLAY_UNIT1);
 80001e8:	2000      	movs	r0, #0
 80001ea:	f002 f8f1 	bl	80023d0 <MATRIX_CLEAR>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	MATRIX_Write_Char(MATRIX_DISPLAY_UNIT1, C++);
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	1c5a      	adds	r2, r3, #1
 80001f2:	71fa      	strb	r2, [r7, #7]
 80001f4:	4619      	mov	r1, r3
 80001f6:	2000      	movs	r0, #0
 80001f8:	f002 f91c 	bl	8002434 <MATRIX_Write_Char>
  	if(C == 58)
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2b3a      	cmp	r3, #58	; 0x3a
 8000200:	d101      	bne.n	8000206 <main+0x3a>
  	{
  		C = 48;
 8000202:	2330      	movs	r3, #48	; 0x30
 8000204:	71fb      	strb	r3, [r7, #7]
  	}
  	HAL_Delay(1000);
 8000206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020a:	f000 f9cf 	bl	80005ac <HAL_Delay>
  	MATRIX_Write_Char(MATRIX_DISPLAY_UNIT1, C++);
 800020e:	e7ee      	b.n	80001ee <main+0x22>
 8000210:	20000208 	.word	0x20000208

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2244      	movs	r2, #68	; 0x44
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f002 f964 	bl	80024f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	463b      	mov	r3, r7
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]
 8000234:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000236:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023a:	f000 fc61 	bl	8000b00 <HAL_PWREx_ControlVoltageScaling>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000244:	f000 f86c 	bl	8000320 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000248:	f000 fc3c 	bl	8000ac4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800024c:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <SystemClock_Config+0xc0>)
 800024e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000252:	4a20      	ldr	r2, [pc, #128]	; (80002d4 <SystemClock_Config+0xc0>)
 8000254:	f023 0318 	bic.w	r3, r3, #24
 8000258:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800025c:	2314      	movs	r3, #20
 800025e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000260:	2301      	movs	r3, #1
 8000262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000264:	2301      	movs	r3, #1
 8000266:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000268:	2300      	movs	r3, #0
 800026a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800026c:	2360      	movs	r3, #96	; 0x60
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000270:	2302      	movs	r3, #2
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000274:	2301      	movs	r3, #1
 8000276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000278:	2301      	movs	r3, #1
 800027a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 800027c:	2324      	movs	r3, #36	; 0x24
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000280:	2307      	movs	r3, #7
 8000282:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000284:	2302      	movs	r3, #2
 8000286:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000288:	2302      	movs	r3, #2
 800028a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028c:	f107 0314 	add.w	r3, r7, #20
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fc8b 	bl	8000bac <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800029c:	f000 f840 	bl	8000320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2303      	movs	r3, #3
 80002a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b4:	463b      	mov	r3, r7
 80002b6:	2104      	movs	r1, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f001 f88b 	bl	80013d4 <HAL_RCC_ClockConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002c4:	f000 f82c 	bl	8000320 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80002c8:	f001 fa70 	bl	80017ac <HAL_RCCEx_EnableMSIPLLMode>
}
 80002cc:	bf00      	nop
 80002ce:	3758      	adds	r7, #88	; 0x58
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <MX_GPIO_Init+0x44>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <MX_GPIO_Init+0x44>)
 80002e4:	f043 0304 	orr.w	r3, r3, #4
 80002e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <MX_GPIO_Init+0x44>)
 80002ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ee:	f003 0304 	and.w	r3, r3, #4
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <MX_GPIO_Init+0x44>)
 80002f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <MX_GPIO_Init+0x44>)
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000302:	4b06      	ldr	r3, [pc, #24]	; (800031c <MX_GPIO_Init+0x44>)
 8000304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000306:	f003 0301 	and.w	r3, r3, #1
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000324:	b672      	cpsid	i
}
 8000326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000328:	e7fe      	b.n	8000328 <Error_Handler+0x8>
	...

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000332:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <HAL_MspInit+0x44>)
 8000334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000336:	4a0e      	ldr	r2, [pc, #56]	; (8000370 <HAL_MspInit+0x44>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6613      	str	r3, [r2, #96]	; 0x60
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <HAL_MspInit+0x44>)
 8000340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <HAL_MspInit+0x44>)
 800034c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800034e:	4a08      	ldr	r2, [pc, #32]	; (8000370 <HAL_MspInit+0x44>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000354:	6593      	str	r3, [r2, #88]	; 0x58
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <HAL_MspInit+0x44>)
 8000358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800035a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000362:	bf00      	nop
 8000364:	370c      	adds	r7, #12
 8000366:	46bd      	mov	sp, r7
 8000368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000

08000374 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	; 0x28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a17      	ldr	r2, [pc, #92]	; (80003f0 <HAL_SPI_MspInit+0x7c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d128      	bne.n	80003e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000396:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <HAL_SPI_MspInit+0x80>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039a:	4a16      	ldr	r2, [pc, #88]	; (80003f4 <HAL_SPI_MspInit+0x80>)
 800039c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003a0:	6613      	str	r3, [r2, #96]	; 0x60
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <HAL_SPI_MspInit+0x80>)
 80003a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <HAL_SPI_MspInit+0x80>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003b2:	4a10      	ldr	r2, [pc, #64]	; (80003f4 <HAL_SPI_MspInit+0x80>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <HAL_SPI_MspInit+0x80>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 80003c6:	2382      	movs	r3, #130	; 0x82
 80003c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003d2:	2303      	movs	r3, #3
 80003d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80003d6:	2305      	movs	r3, #5
 80003d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	4619      	mov	r1, r3
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003e4:	f000 f9ec 	bl	80007c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80003e8:	bf00      	nop
 80003ea:	3728      	adds	r7, #40	; 0x28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40013000 	.word	0x40013000
 80003f4:	40021000 	.word	0x40021000

080003f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <NMI_Handler+0x4>

080003fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000402:	e7fe      	b.n	8000402 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	e7fe      	b.n	8000408 <MemManage_Handler+0x4>

0800040a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040a:	b480      	push	{r7}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040e:	e7fe      	b.n	800040e <BusFault_Handler+0x4>

08000410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <UsageFault_Handler+0x4>

08000416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr

08000440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000444:	f000 f892 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	bd80      	pop	{r7, pc}

0800044c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <SystemInit+0x20>)
 8000452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <SystemInit+0x20>)
 8000458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800045c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000ed00 	.word	0xe000ed00

08000470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000474:	f7ff ffea 	bl	800044c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	; (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	; (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	; (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	; (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	; (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800049e:	f002 f803 	bl	80024a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004a2:	f7ff fe93 	bl	80001cc <main>

080004a6 <LoopForever>:

LoopForever:
    b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80004a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80004b4:	0800256c 	.word	0x0800256c
  ldr r2, =_sbss
 80004b8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80004bc:	20000290 	.word	0x20000290

080004c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC1_IRQHandler>

080004c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	b082      	sub	sp, #8
 80004c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004c8:	2300      	movs	r3, #0
 80004ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004cc:	2003      	movs	r0, #3
 80004ce:	f000 f943 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004d2:	200f      	movs	r0, #15
 80004d4:	f000 f80e 	bl	80004f4 <HAL_InitTick>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d002      	beq.n	80004e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004de:	2301      	movs	r3, #1
 80004e0:	71fb      	strb	r3, [r7, #7]
 80004e2:	e001      	b.n	80004e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004e4:	f7ff ff22 	bl	800032c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004e8:	79fb      	ldrb	r3, [r7, #7]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
	...

080004f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <HAL_InitTick+0x6c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d023      	beq.n	8000550 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <HAL_InitTick+0x70>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b14      	ldr	r3, [pc, #80]	; (8000560 <HAL_InitTick+0x6c>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4619      	mov	r1, r3
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	fbb3 f3f1 	udiv	r3, r3, r1
 800051a:	fbb2 f3f3 	udiv	r3, r2, r3
 800051e:	4618      	mov	r0, r3
 8000520:	f000 f941 	bl	80007a6 <HAL_SYSTICK_Config>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10f      	bne.n	800054a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b0f      	cmp	r3, #15
 800052e:	d809      	bhi.n	8000544 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000530:	2200      	movs	r2, #0
 8000532:	6879      	ldr	r1, [r7, #4]
 8000534:	f04f 30ff 	mov.w	r0, #4294967295
 8000538:	f000 f919 	bl	800076e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800053c:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <HAL_InitTick+0x74>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	6013      	str	r3, [r2, #0]
 8000542:	e007      	b.n	8000554 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000544:	2301      	movs	r3, #1
 8000546:	73fb      	strb	r3, [r7, #15]
 8000548:	e004      	b.n	8000554 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	e001      	b.n	8000554 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000550:	2301      	movs	r3, #1
 8000552:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000554:	7bfb      	ldrb	r3, [r7, #15]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000008 	.word	0x20000008
 8000564:	20000000 	.word	0x20000000
 8000568:	20000004 	.word	0x20000004

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000008 	.word	0x20000008
 8000590:	2000026c 	.word	0x2000026c

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	2000026c 	.word	0x2000026c

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005c6:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <HAL_Delay+0x44>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000008 	.word	0x20000008

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff47 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff5c 	bl	800063c <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffb0 	bl	8000714 <SysTick_Config>
 80007b4:	4603      	mov	r3, r0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
	...

080007c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007ce:	e148      	b.n	8000a62 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	fa01 f303 	lsl.w	r3, r1, r3
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 813a 	beq.w	8000a5c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	f003 0303 	and.w	r3, r3, #3
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d005      	beq.n	8000800 <HAL_GPIO_Init+0x40>
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d130      	bne.n	8000862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	2203      	movs	r2, #3
 800080c:	fa02 f303 	lsl.w	r3, r2, r3
 8000810:	43db      	mvns	r3, r3
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	4013      	ands	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68da      	ldr	r2, [r3, #12]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	fa02 f303 	lsl.w	r3, r2, r3
 8000824:	693a      	ldr	r2, [r7, #16]
 8000826:	4313      	orrs	r3, r2
 8000828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000836:	2201      	movs	r2, #1
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43db      	mvns	r3, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4013      	ands	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	f003 0201 	and.w	r2, r3, #1
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	2b03      	cmp	r3, #3
 800086c:	d017      	beq.n	800089e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d123      	bne.n	80008f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	220f      	movs	r2, #15
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	691a      	ldr	r2, [r3, #16]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	08da      	lsrs	r2, r3, #3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3208      	adds	r2, #8
 80008ec:	6939      	ldr	r1, [r7, #16]
 80008ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0203 	and.w	r2, r3, #3
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800092e:	2b00      	cmp	r3, #0
 8000930:	f000 8094 	beq.w	8000a5c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000934:	4b52      	ldr	r3, [pc, #328]	; (8000a80 <HAL_GPIO_Init+0x2c0>)
 8000936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000938:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <HAL_GPIO_Init+0x2c0>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	6613      	str	r3, [r2, #96]	; 0x60
 8000940:	4b4f      	ldr	r3, [pc, #316]	; (8000a80 <HAL_GPIO_Init+0x2c0>)
 8000942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800094c:	4a4d      	ldr	r2, [pc, #308]	; (8000a84 <HAL_GPIO_Init+0x2c4>)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	089b      	lsrs	r3, r3, #2
 8000952:	3302      	adds	r3, #2
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	f003 0303 	and.w	r3, r3, #3
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	220f      	movs	r2, #15
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	43db      	mvns	r3, r3
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4013      	ands	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000976:	d00d      	beq.n	8000994 <HAL_GPIO_Init+0x1d4>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	4a43      	ldr	r2, [pc, #268]	; (8000a88 <HAL_GPIO_Init+0x2c8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d007      	beq.n	8000990 <HAL_GPIO_Init+0x1d0>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4a42      	ldr	r2, [pc, #264]	; (8000a8c <HAL_GPIO_Init+0x2cc>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d101      	bne.n	800098c <HAL_GPIO_Init+0x1cc>
 8000988:	2302      	movs	r3, #2
 800098a:	e004      	b.n	8000996 <HAL_GPIO_Init+0x1d6>
 800098c:	2307      	movs	r3, #7
 800098e:	e002      	b.n	8000996 <HAL_GPIO_Init+0x1d6>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <HAL_GPIO_Init+0x1d6>
 8000994:	2300      	movs	r3, #0
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	f002 0203 	and.w	r2, r2, #3
 800099c:	0092      	lsls	r2, r2, #2
 800099e:	4093      	lsls	r3, r2
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009a6:	4937      	ldr	r1, [pc, #220]	; (8000a84 <HAL_GPIO_Init+0x2c4>)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3302      	adds	r3, #2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009d8:	4a2d      	ldr	r2, [pc, #180]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009de:	4b2c      	ldr	r3, [pc, #176]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a02:	4a23      	ldr	r2, [pc, #140]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a2c:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_GPIO_Init+0x2d0>)
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f47f aeaf 	bne.w	80007d0 <HAL_GPIO_Init+0x10>
  }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010000 	.word	0x40010000
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	40010400 	.word	0x40010400

08000a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	460b      	mov	r3, r1
 8000a9e:	807b      	strh	r3, [r7, #2]
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000aa4:	787b      	ldrb	r3, [r7, #1]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aaa:	887a      	ldrh	r2, [r7, #2]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ab0:	e002      	b.n	8000ab8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ab2:	887a      	ldrh	r2, [r7, #2]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_PWREx_GetVoltageRange+0x18>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40007000 	.word	0x40007000

08000b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b0e:	d130      	bne.n	8000b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b1c:	d038      	beq.n	8000b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b26:	4a1e      	ldr	r2, [pc, #120]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2232      	movs	r2, #50	; 0x32
 8000b34:	fb02 f303 	mul.w	r3, r2, r3
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3301      	adds	r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b44:	e002      	b.n	8000b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b58:	d102      	bne.n	8000b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f2      	bne.n	8000b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6c:	d110      	bne.n	8000b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e00f      	b.n	8000b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b7e:	d007      	beq.n	8000b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40007000 	.word	0x40007000
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	431bde83 	.word	0x431bde83

08000bac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	f000 bc02 	b.w	80013c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000bc0:	4b96      	ldr	r3, [pc, #600]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000bca:	4b94      	ldr	r3, [pc, #592]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	f000 80e4 	beq.w	8000daa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d007      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x4c>
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	2b0c      	cmp	r3, #12
 8000bec:	f040 808b 	bne.w	8000d06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	f040 8087 	bne.w	8000d06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000bf8:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d005      	beq.n	8000c10 <HAL_RCC_OscConfig+0x64>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e3d9      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6a1a      	ldr	r2, [r3, #32]
 8000c14:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d004      	beq.n	8000c2a <HAL_RCC_OscConfig+0x7e>
 8000c20:	4b7e      	ldr	r3, [pc, #504]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c28:	e005      	b.n	8000c36 <HAL_RCC_OscConfig+0x8a>
 8000c2a:	4b7c      	ldr	r3, [pc, #496]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d223      	bcs.n	8000c82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 fd54 	bl	80016ec <RCC_SetFlashLatencyFromMSIRange>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e3ba      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c4e:	4b73      	ldr	r3, [pc, #460]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a72      	ldr	r2, [pc, #456]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c54:	f043 0308 	orr.w	r3, r3, #8
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	4b70      	ldr	r3, [pc, #448]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	496d      	ldr	r1, [pc, #436]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c6c:	4b6b      	ldr	r3, [pc, #428]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69db      	ldr	r3, [r3, #28]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	4968      	ldr	r1, [pc, #416]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
 8000c80:	e025      	b.n	8000cce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c82:	4b66      	ldr	r3, [pc, #408]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a65      	ldr	r2, [pc, #404]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c88:	f043 0308 	orr.w	r3, r3, #8
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	4b63      	ldr	r3, [pc, #396]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	4960      	ldr	r1, [pc, #384]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ca0:	4b5e      	ldr	r3, [pc, #376]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	495b      	ldr	r1, [pc, #364]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a1b      	ldr	r3, [r3, #32]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fd14 	bl	80016ec <RCC_SetFlashLatencyFromMSIRange>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e37a      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000cce:	f000 fc81 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	4950      	ldr	r1, [pc, #320]	; (8000e20 <HAL_RCC_OscConfig+0x274>)
 8000ce0:	5ccb      	ldrb	r3, [r1, r3]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cea:	4a4e      	ldr	r2, [pc, #312]	; (8000e24 <HAL_RCC_OscConfig+0x278>)
 8000cec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000cee:	4b4e      	ldr	r3, [pc, #312]	; (8000e28 <HAL_RCC_OscConfig+0x27c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fbfe 	bl	80004f4 <HAL_InitTick>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d052      	beq.n	8000da8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	e35e      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d032      	beq.n	8000d74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000d0e:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a42      	ldr	r2, [pc, #264]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fc3b 	bl	8000594 <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d20:	e008      	b.n	8000d34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d22:	f7ff fc37 	bl	8000594 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e347      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f0      	beq.n	8000d22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d40:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a35      	ldr	r2, [pc, #212]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	4b33      	ldr	r3, [pc, #204]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4930      	ldr	r1, [pc, #192]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	492b      	ldr	r1, [pc, #172]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	604b      	str	r3, [r1, #4]
 8000d72:	e01a      	b.n	8000daa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fc08 	bl	8000594 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d88:	f7ff fc04 	bl	8000594 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e314      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x1dc>
 8000da6:	e000      	b.n	8000daa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d073      	beq.n	8000e9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d005      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x21c>
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d10e      	bne.n	8000de0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d10b      	bne.n	8000de0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d063      	beq.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d15f      	bne.n	8000e9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e2f1      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de8:	d106      	bne.n	8000df8 <HAL_RCC_OscConfig+0x24c>
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000df0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	e025      	b.n	8000e44 <HAL_RCC_OscConfig+0x298>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e00:	d114      	bne.n	8000e2c <HAL_RCC_OscConfig+0x280>
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e0c:	6013      	str	r3, [r2, #0]
 8000e0e:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a02      	ldr	r2, [pc, #8]	; (8000e1c <HAL_RCC_OscConfig+0x270>)
 8000e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	e013      	b.n	8000e44 <HAL_RCC_OscConfig+0x298>
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	08002518 	.word	0x08002518
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	4ba0      	ldr	r3, [pc, #640]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a9f      	ldr	r2, [pc, #636]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b9d      	ldr	r3, [pc, #628]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a9c      	ldr	r2, [pc, #624]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fba2 	bl	8000594 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fb9e 	bl	8000594 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e2ae      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e66:	4b92      	ldr	r3, [pc, #584]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0x2a8>
 8000e72:	e014      	b.n	8000e9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e74:	f7ff fb8e 	bl	8000594 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fb8a 	bl	8000594 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e29a      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e8e:	4b88      	ldr	r3, [pc, #544]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x2d0>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d060      	beq.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d005      	beq.n	8000ebc <HAL_RCC_OscConfig+0x310>
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b0c      	cmp	r3, #12
 8000eb4:	d119      	bne.n	8000eea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d116      	bne.n	8000eea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ebc:	4b7c      	ldr	r3, [pc, #496]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x328>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e277      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	061b      	lsls	r3, r3, #24
 8000ee2:	4973      	ldr	r1, [pc, #460]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ee8:	e040      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d023      	beq.n	8000f3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef2:	4b6f      	ldr	r3, [pc, #444]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a6e      	ldr	r2, [pc, #440]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efe:	f7ff fb49 	bl	8000594 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f06:	f7ff fb45 	bl	8000594 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e255      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d0f0      	beq.n	8000f06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f24:	4b62      	ldr	r3, [pc, #392]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	691b      	ldr	r3, [r3, #16]
 8000f30:	061b      	lsls	r3, r3, #24
 8000f32:	495f      	ldr	r1, [pc, #380]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f34:	4313      	orrs	r3, r2
 8000f36:	604b      	str	r3, [r1, #4]
 8000f38:	e018      	b.n	8000f6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a5c      	ldr	r2, [pc, #368]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb25 	bl	8000594 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fb21 	bl	8000594 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e231      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d03c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01c      	beq.n	8000fba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f80:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f86:	4a4a      	ldr	r2, [pc, #296]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f90:	f7ff fb00 	bl	8000594 <HAL_GetTick>
 8000f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f96:	e008      	b.n	8000faa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f98:	f7ff fafc 	bl	8000594 <HAL_GetTick>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e20c      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0ef      	beq.n	8000f98 <HAL_RCC_OscConfig+0x3ec>
 8000fb8:	e01b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fc0:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fc2:	f023 0301 	bic.w	r3, r3, #1
 8000fc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fca:	f7ff fae3 	bl	8000594 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fadf 	bl	8000594 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e1ef      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fe4:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8000fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1ef      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 80a6 	beq.w	800114c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10d      	bne.n	800102c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6593      	str	r3, [r2, #88]	; 0x58
 800101c:	4b24      	ldr	r3, [pc, #144]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001028:	2301      	movs	r3, #1
 800102a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001034:	2b00      	cmp	r3, #0
 8001036:	d118      	bne.n	800106a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001044:	f7ff faa6 	bl	8000594 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104c:	f7ff faa2 	bl	8000594 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e1b2      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_RCC_OscConfig+0x508>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d108      	bne.n	8001084 <HAL_RCC_OscConfig+0x4d8>
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001082:	e029      	b.n	80010d8 <HAL_RCC_OscConfig+0x52c>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d115      	bne.n	80010b8 <HAL_RCC_OscConfig+0x50c>
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800108e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 800109e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_RCC_OscConfig+0x504>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010ac:	e014      	b.n	80010d8 <HAL_RCC_OscConfig+0x52c>
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40007000 	.word	0x40007000
 80010b8:	4b9a      	ldr	r3, [pc, #616]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	4a99      	ldr	r2, [pc, #612]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80010c8:	4b96      	ldr	r3, [pc, #600]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ce:	4a95      	ldr	r2, [pc, #596]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80010d0:	f023 0304 	bic.w	r3, r3, #4
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d016      	beq.n	800110e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e0:	f7ff fa58 	bl	8000594 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010e6:	e00a      	b.n	80010fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e8:	f7ff fa54 	bl	8000594 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d901      	bls.n	80010fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80010fa:	2303      	movs	r3, #3
 80010fc:	e162      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010fe:	4b89      	ldr	r3, [pc, #548]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ed      	beq.n	80010e8 <HAL_RCC_OscConfig+0x53c>
 800110c:	e015      	b.n	800113a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110e:	f7ff fa41 	bl	8000594 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fa3d 	bl	8000594 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e14b      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800112c:	4b7d      	ldr	r3, [pc, #500]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 800112e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1ed      	bne.n	8001116 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800113a:	7ffb      	ldrb	r3, [r7, #31]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001140:	4b78      	ldr	r3, [pc, #480]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	4a77      	ldr	r2, [pc, #476]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800114a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0320 	and.w	r3, r3, #32
 8001154:	2b00      	cmp	r3, #0
 8001156:	d03c      	beq.n	80011d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	2b00      	cmp	r3, #0
 800115e:	d01c      	beq.n	800119a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001160:	4b70      	ldr	r3, [pc, #448]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001162:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001166:	4a6f      	ldr	r2, [pc, #444]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001170:	f7ff fa10 	bl	8000594 <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001178:	f7ff fa0c 	bl	8000594 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e11c      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800118a:	4b66      	ldr	r3, [pc, #408]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 800118c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0ef      	beq.n	8001178 <HAL_RCC_OscConfig+0x5cc>
 8001198:	e01b      	b.n	80011d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800119a:	4b62      	ldr	r3, [pc, #392]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 800119c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011a0:	4a60      	ldr	r2, [pc, #384]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011aa:	f7ff f9f3 	bl	8000594 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011b2:	f7ff f9ef 	bl	8000594 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e0ff      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80011c4:	4b57      	ldr	r3, [pc, #348]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80011c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1ef      	bne.n	80011b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 80f3 	beq.w	80013c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	f040 80c9 	bne.w	8001378 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80011e6:	4b4f      	ldr	r3, [pc, #316]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0203 	and.w	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d12c      	bne.n	8001254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001204:	3b01      	subs	r3, #1
 8001206:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001208:	429a      	cmp	r2, r3
 800120a:	d123      	bne.n	8001254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001218:	429a      	cmp	r2, r3
 800121a:	d11b      	bne.n	8001254 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001226:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001228:	429a      	cmp	r2, r3
 800122a:	d113      	bne.n	8001254 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	3b01      	subs	r3, #1
 800123a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800123c:	429a      	cmp	r2, r3
 800123e:	d109      	bne.n	8001254 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	085b      	lsrs	r3, r3, #1
 800124c:	3b01      	subs	r3, #1
 800124e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001250:	429a      	cmp	r2, r3
 8001252:	d06b      	beq.n	800132c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b0c      	cmp	r3, #12
 8001258:	d062      	beq.n	8001320 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800125a:	4b32      	ldr	r3, [pc, #200]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e0ac      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001274:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001276:	f7ff f98d 	bl	8000594 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff f989 	bl	8000594 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e099      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f0      	bne.n	800127e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_RCC_OscConfig+0x77c>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012ac:	3a01      	subs	r2, #1
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	4311      	orrs	r1, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012b6:	0212      	lsls	r2, r2, #8
 80012b8:	4311      	orrs	r1, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012be:	0852      	lsrs	r2, r2, #1
 80012c0:	3a01      	subs	r2, #1
 80012c2:	0552      	lsls	r2, r2, #21
 80012c4:	4311      	orrs	r1, r2
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ca:	0852      	lsrs	r2, r2, #1
 80012cc:	3a01      	subs	r2, #1
 80012ce:	0652      	lsls	r2, r2, #25
 80012d0:	4311      	orrs	r1, r2
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012d6:	06d2      	lsls	r2, r2, #27
 80012d8:	430a      	orrs	r2, r1
 80012da:	4912      	ldr	r1, [pc, #72]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0f      	ldr	r2, [pc, #60]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80012e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 80012f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012f8:	f7ff f94c 	bl	8000594 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff f948 	bl	8000594 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e058      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <HAL_RCC_OscConfig+0x778>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800131e:	e050      	b.n	80013c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e04f      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
 8001324:	40021000 	.word	0x40021000
 8001328:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d144      	bne.n	80013c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001338:	4b24      	ldr	r3, [pc, #144]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a23      	ldr	r2, [pc, #140]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 800133e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001342:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001350:	f7ff f920 	bl	8000594 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff f91c 	bl	8000594 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e02c      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x7ac>
 8001376:	e024      	b.n	80013c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	2b0c      	cmp	r3, #12
 800137c:	d01f      	beq.n	80013be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 8001384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff f903 	bl	8000594 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff f8ff 	bl	8000594 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e00f      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f0      	bne.n	8001392 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	4905      	ldr	r1, [pc, #20]	; (80013cc <HAL_RCC_OscConfig+0x820>)
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x824>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	60cb      	str	r3, [r1, #12]
 80013bc:	e001      	b.n	80013c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3720      	adds	r7, #32
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	feeefffc 	.word	0xfeeefffc

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0e7      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d910      	bls.n	8001418 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	4b72      	ldr	r3, [pc, #456]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 0207 	bic.w	r2, r3, #7
 80013fe:	4970      	ldr	r1, [pc, #448]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001406:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d001      	beq.n	8001418 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e0cf      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001430:	429a      	cmp	r2, r3
 8001432:	d908      	bls.n	8001446 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001434:	4b63      	ldr	r3, [pc, #396]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4960      	ldr	r1, [pc, #384]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d04c      	beq.n	80014ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b03      	cmp	r3, #3
 8001458:	d107      	bne.n	800146a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145a:	4b5a      	ldr	r3, [pc, #360]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d121      	bne.n	80014aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0a6      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d107      	bne.n	8001482 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e09a      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800148a:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e08e      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e086      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4943      	ldr	r1, [pc, #268]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014bc:	f7ff f86a 	bl	8000594 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff f866 	bl	8000594 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e06e      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d010      	beq.n	800151a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001504:	429a      	cmp	r2, r3
 8001506:	d208      	bcs.n	800151a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001508:	4b2e      	ldr	r3, [pc, #184]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	492b      	ldr	r1, [pc, #172]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d210      	bcs.n	800154a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001528:	4b25      	ldr	r3, [pc, #148]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 0207 	bic.w	r2, r3, #7
 8001530:	4923      	ldr	r1, [pc, #140]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_RCC_ClockConfig+0x1ec>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d001      	beq.n	800154a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e036      	b.n	80015b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	4918      	ldr	r1, [pc, #96]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d009      	beq.n	8001588 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	4910      	ldr	r1, [pc, #64]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001588:	f000 f824 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	f003 030f 	and.w	r3, r3, #15
 8001598:	490b      	ldr	r1, [pc, #44]	; (80015c8 <HAL_RCC_ClockConfig+0x1f4>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	f003 031f 	and.w	r3, r3, #31
 80015a0:	fa22 f303 	lsr.w	r3, r2, r3
 80015a4:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_RCC_ClockConfig+0x1f8>)
 80015a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_RCC_ClockConfig+0x1fc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffa1 	bl	80004f4 <HAL_InitTick>
 80015b2:	4603      	mov	r3, r0
 80015b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80015b6:	7afb      	ldrb	r3, [r7, #11]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40022000 	.word	0x40022000
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08002518 	.word	0x08002518
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015e2:	4b3e      	ldr	r3, [pc, #248]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x34>
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d121      	bne.n	8001646 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d11e      	bne.n	8001646 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d107      	bne.n	8001624 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	61fb      	str	r3, [r7, #28]
 8001622:	e005      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001630:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10d      	bne.n	800165c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001644:	e00a      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d102      	bne.n	8001652 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	e004      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b08      	cmp	r3, #8
 8001656:	d101      	bne.n	800165c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800165a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d134      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001662:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2b02      	cmp	r3, #2
 8001670:	d003      	beq.n	800167a <HAL_RCC_GetSysClockFreq+0xa6>
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d003      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0xac>
 8001678:	e005      	b.n	8001686 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800167c:	617b      	str	r3, [r7, #20]
      break;
 800167e:	e005      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001682:	617b      	str	r3, [r7, #20]
      break;
 8001684:	e002      	b.n	800168c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	617b      	str	r3, [r7, #20]
      break;
 800168a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	3301      	adds	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	fb03 f202 	mul.w	r2, r3, r2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <HAL_RCC_GetSysClockFreq+0x108>)
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	0e5b      	lsrs	r3, r3, #25
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	3301      	adds	r3, #1
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016c2:	697a      	ldr	r2, [r7, #20]
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016cc:	69bb      	ldr	r3, [r7, #24]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08002528 	.word	0x08002528
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	007a1200 	.word	0x007a1200

080016ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80016f8:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001704:	f7ff f9ee 	bl	8000ae4 <HAL_PWREx_GetVoltageRange>
 8001708:	6178      	str	r0, [r7, #20]
 800170a:	e014      	b.n	8001736 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a24      	ldr	r2, [pc, #144]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001724:	f7ff f9de 	bl	8000ae4 <HAL_PWREx_GetVoltageRange>
 8001728:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800172a:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173c:	d10b      	bne.n	8001756 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b80      	cmp	r3, #128	; 0x80
 8001742:	d919      	bls.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2ba0      	cmp	r3, #160	; 0xa0
 8001748:	d902      	bls.n	8001750 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800174a:	2302      	movs	r3, #2
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	e013      	b.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001750:	2301      	movs	r3, #1
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	e010      	b.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b80      	cmp	r3, #128	; 0x80
 800175a:	d902      	bls.n	8001762 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800175c:	2303      	movs	r3, #3
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e00a      	b.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b80      	cmp	r3, #128	; 0x80
 8001766:	d102      	bne.n	800176e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001768:	2302      	movs	r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	e004      	b.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b70      	cmp	r3, #112	; 0x70
 8001772:	d101      	bne.n	8001778 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001774:	2301      	movs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f023 0207 	bic.w	r2, r3, #7
 8001780:	4909      	ldr	r1, [pc, #36]	; (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	429a      	cmp	r2, r3
 8001794:	d001      	beq.n	800179a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e000      	b.n	800179c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40022000 	.word	0x40022000

080017ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e095      	b.n	800190a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d108      	bne.n	80017f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017ee:	d009      	beq.n	8001804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
 80017f6:	e005      	b.n	8001804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe fda8 	bl	8000374 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800183a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001844:	d902      	bls.n	800184c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e002      	b.n	8001852 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800184c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001850:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800185a:	d007      	beq.n	800186c <HAL_SPI_Init+0xa0>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001864:	d002      	beq.n	800186c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	ea42 0103 	orr.w	r1, r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	0c1b      	lsrs	r3, r3, #16
 80018c8:	f003 0204 	and.w	r2, r3, #4
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	f003 0308 	and.w	r3, r3, #8
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80018e8:	ea42 0103 	orr.w	r1, r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b088      	sub	sp, #32
 8001916:	af00      	add	r7, sp, #0
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_SPI_Transmit+0x22>
 8001930:	2302      	movs	r3, #2
 8001932:	e158      	b.n	8001be6 <HAL_SPI_Transmit+0x2d4>
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800193c:	f7fe fe2a 	bl	8000594 <HAL_GetTick>
 8001940:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d002      	beq.n	8001958 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001952:	2302      	movs	r3, #2
 8001954:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001956:	e13d      	b.n	8001bd4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_SPI_Transmit+0x52>
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001968:	e134      	b.n	8001bd4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	88fa      	ldrh	r2, [r7, #6]
 8001982:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b4:	d10f      	bne.n	80019d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e0:	2b40      	cmp	r3, #64	; 0x40
 80019e2:	d007      	beq.n	80019f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80019fc:	d94b      	bls.n	8001a96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <HAL_SPI_Transmit+0xfa>
 8001a06:	8afb      	ldrh	r3, [r7, #22]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d13e      	bne.n	8001a8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a10:	881a      	ldrh	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1c:	1c9a      	adds	r2, r3, #2
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a30:	e02b      	b.n	8001a8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d112      	bne.n	8001a66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	1c9a      	adds	r2, r3, #2
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a64:	e011      	b.n	8001a8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a66:	f7fe fd95 	bl	8000594 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d803      	bhi.n	8001a7e <HAL_SPI_Transmit+0x16c>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d102      	bne.n	8001a84 <HAL_SPI_Transmit+0x172>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a88:	e0a4      	b.n	8001bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ce      	bne.n	8001a32 <HAL_SPI_Transmit+0x120>
 8001a94:	e07c      	b.n	8001b90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_SPI_Transmit+0x192>
 8001a9e:	8afb      	ldrh	r3, [r7, #22]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d170      	bne.n	8001b86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d912      	bls.n	8001ad4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	881a      	ldrh	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001abe:	1c9a      	adds	r2, r3, #2
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	3b02      	subs	r3, #2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001ad2:	e058      	b.n	8001b86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	330c      	adds	r3, #12
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001afa:	e044      	b.n	8001b86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d12b      	bne.n	8001b62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d912      	bls.n	8001b3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b18:	881a      	ldrh	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	1c9a      	adds	r2, r3, #2
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b02      	subs	r3, #2
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b38:	e025      	b.n	8001b86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	330c      	adds	r3, #12
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001b60:	e011      	b.n	8001b86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b62:	f7fe fd17 	bl	8000594 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d803      	bhi.n	8001b7a <HAL_SPI_Transmit+0x268>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b78:	d102      	bne.n	8001b80 <HAL_SPI_Transmit+0x26e>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001b84:	e026      	b.n	8001bd4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1b5      	bne.n	8001afc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	6839      	ldr	r1, [r7, #0]
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 f949 	bl	8001e2c <SPI_EndRxTxTransaction>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d002      	beq.n	8001ba6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10a      	bne.n	8001bc4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
 8001bd0:	e000      	b.n	8001bd4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8001bd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8001be4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001c00:	f7fe fcc8 	bl	8000594 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001c10:	f7fe fcc0 	bl	8000594 <HAL_GetTick>
 8001c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	0d1b      	lsrs	r3, r3, #20
 8001c1e:	69fa      	ldr	r2, [r7, #28]
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001c26:	e054      	b.n	8001cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2e:	d050      	beq.n	8001cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001c30:	f7fe fcb0 	bl	8000594 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d902      	bls.n	8001c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d13d      	bne.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c5e:	d111      	bne.n	8001c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c68:	d004      	beq.n	8001c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c72:	d107      	bne.n	8001c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c8c:	d10f      	bne.n	8001cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e017      	b.n	8001cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d19b      	bne.n	8001c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000000 	.word	0x20000000

08001d00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001d12:	f7fe fc3f 	bl	8000594 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1a:	1a9b      	subs	r3, r3, r2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8001d22:	f7fe fc37 	bl	8000594 <HAL_GetTick>
 8001d26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	330c      	adds	r3, #12
 8001d2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001d30:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	00da      	lsls	r2, r3, #3
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	0d1b      	lsrs	r3, r3, #20
 8001d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001d48:	e060      	b.n	8001e0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001d50:	d107      	bne.n	8001d62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001d60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d050      	beq.n	8001e0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001d6a:	f7fe fc13 	bl	8000594 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d902      	bls.n	8001d80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d13d      	bne.n	8001dfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d98:	d111      	bne.n	8001dbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da2:	d004      	beq.n	8001dae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d107      	bne.n	8001dbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc6:	d10f      	bne.n	8001de8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001de6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e010      	b.n	8001e1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d196      	bne.n	8001d4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3728      	adds	r7, #40	; 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000000 	.word	0x20000000

08001e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f7ff ff5b 	bl	8001d00 <SPI_WaitFifoStateUntilTimeout>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e54:	f043 0220 	orr.w	r2, r3, #32
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e027      	b.n	8001eb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2200      	movs	r2, #0
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fec0 	bl	8001bf0 <SPI_WaitFlagStateUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d007      	beq.n	8001e86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	f043 0220 	orr.w	r2, r3, #32
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e014      	b.n	8001eb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff ff34 	bl	8001d00 <SPI_WaitFifoStateUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d007      	beq.n	8001eae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	f043 0220 	orr.w	r2, r3, #32
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e000      	b.n	8001eb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SPI_TX_Byte>:
//-----------------------------[ Static Functions' Definitions ]----------------------------

// Static Functions Used By Library But Not Visible To User Who Include The Library (Driver)

static void SPI_TX_Byte(uint8_t au8_DATA)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(g_hspi, &au8_DATA, 1, 10);
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <SPI_TX_Byte+0x20>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	1df9      	adds	r1, r7, #7
 8001ec8:	230a      	movs	r3, #10
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f7ff fd21 	bl	8001912 <HAL_SPI_Transmit>
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000270 	.word	0x20000270

08001edc <SS_ENABLE>:

static void SS_ENABLE(uint8_t au8_MATRIX_Instance)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 0);
 8001ee6:	79fa      	ldrb	r2, [r7, #7]
 8001ee8:	490b      	ldr	r1, [pc, #44]	; (8001f18 <SS_ENABLE+0x3c>)
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	6818      	ldr	r0, [r3, #0]
 8001ef6:	79fa      	ldrb	r2, [r7, #7]
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <SS_ENABLE+0x3c>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	3304      	adds	r3, #4
 8001f06:	881b      	ldrh	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f7fe fdc2 	bl	8000a94 <HAL_GPIO_WritePin>
}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	08002558 	.word	0x08002558

08001f1c <SS_DISABLE>:

static void SS_DISABLE(uint8_t au8_MATRIX_Instance)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 1);
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	490b      	ldr	r1, [pc, #44]	; (8001f58 <SS_DISABLE+0x3c>)
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <SS_DISABLE+0x3c>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	3304      	adds	r3, #4
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fda2 	bl	8000a94 <HAL_GPIO_WritePin>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	08002558 	.word	0x08002558

08001f5c <TxByte>:

static void TxByte(uint8_t au8_MATRIX_Instance, uint8_t au8_Col, uint8_t au8_Val)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	460b      	mov	r3, r1
 8001f68:	71bb      	strb	r3, [r7, #6]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	717b      	strb	r3, [r7, #5]
	SS_ENABLE(au8_MATRIX_Instance);
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ffb3 	bl	8001edc <SS_ENABLE>
	SPI_TX_Byte(au8_Col);
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff9d 	bl	8001eb8 <SPI_TX_Byte>
	SPI_TX_Byte(au8_Val);
 8001f7e:	797b      	ldrb	r3, [r7, #5]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff99 	bl	8001eb8 <SPI_TX_Byte>
	SS_DISABLE(au8_MATRIX_Instance);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ffc7 	bl	8001f1c <SS_DISABLE>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <DOT_MATRIX_Init>:
//----------------------------[ Library Functions' Definitions ]---------------------------

// Functions To Be Used By The User Who Include The Library (Driver)

void DOT_MATRIX_Init(SPI_HandleTypeDef * hspi)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    g_hspi = hspi;
 8001fbc:	4ab2      	ldr	r2, [pc, #712]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]

    /*--------[ Configure The SS GPIO Pins ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001fc8:	e06e      	b.n	80020a8 <DOT_MATRIX_Init+0x110>
    {
    	if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOA)
 8001fca:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001fce:	49af      	ldr	r1, [pc, #700]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fe0:	d10c      	bne.n	8001ffc <DOT_MATRIX_Init+0x64>
    	{
    		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	4bab      	ldr	r3, [pc, #684]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4aaa      	ldr	r2, [pc, #680]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4ba8      	ldr	r3, [pc, #672]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	e030      	b.n	800205e <DOT_MATRIX_Init+0xc6>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOB)
 8001ffc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002000:	49a2      	ldr	r1, [pc, #648]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4aa1      	ldr	r2, [pc, #644]	; (8002294 <DOT_MATRIX_Init+0x2fc>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d10c      	bne.n	800202e <DOT_MATRIX_Init+0x96>
    	{
    		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002014:	4b9e      	ldr	r3, [pc, #632]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	4a9d      	ldr	r2, [pc, #628]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002020:	4b9b      	ldr	r3, [pc, #620]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8002022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	e017      	b.n	800205e <DOT_MATRIX_Init+0xc6>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOC)
 800202e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002032:	4996      	ldr	r1, [pc, #600]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a95      	ldr	r2, [pc, #596]	; (8002298 <DOT_MATRIX_Init+0x300>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10b      	bne.n	800205e <DOT_MATRIX_Init+0xc6>
    	{
    		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	4b92      	ldr	r3, [pc, #584]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	4a91      	ldr	r2, [pc, #580]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002052:	4b8f      	ldr	r3, [pc, #572]	; (8002290 <DOT_MATRIX_Init+0x2f8>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
    	}
    	GPIO_InitStruct.Pin = DOT_MATRIX_CfgParam[i].SS_PIN;
 800205e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002062:	498a      	ldr	r1, [pc, #552]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3304      	adds	r3, #4
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	61bb      	str	r3, [r7, #24]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	627b      	str	r3, [r7, #36]	; 0x24
    	HAL_GPIO_Init(DOT_MATRIX_CfgParam[i].SS_GPIO, &GPIO_InitStruct);
 8002080:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002084:	4981      	ldr	r1, [pc, #516]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f107 0218 	add.w	r2, r7, #24
 8002096:	4611      	mov	r1, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fb91 	bl	80007c0 <HAL_GPIO_Init>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 800209e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020a2:	3301      	adds	r3, #1
 80020a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80020a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d08c      	beq.n	8001fca <DOT_MATRIX_Init+0x32>
    }
    /*--------[ Configure The SPI Peripheral ]-------*/
    g_hspi->Instance = DOT_MATRIX_SPI;
 80020b0:	4b75      	ldr	r3, [pc, #468]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a79      	ldr	r2, [pc, #484]	; (800229c <DOT_MATRIX_Init+0x304>)
 80020b6:	601a      	str	r2, [r3, #0]
    g_hspi->Init.Mode = SPI_MODE_MASTER;
 80020b8:	4b73      	ldr	r3, [pc, #460]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020c0:	605a      	str	r2, [r3, #4]
    g_hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80020c2:	4b71      	ldr	r3, [pc, #452]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    g_hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80020ca:	4b6f      	ldr	r3, [pc, #444]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80020d2:	60da      	str	r2, [r3, #12]
    g_hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020d4:	4b6c      	ldr	r3, [pc, #432]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
    g_hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	615a      	str	r2, [r3, #20]
    g_hspi->Init.NSS = SPI_NSS_SOFT;
 80020e4:	4b68      	ldr	r3, [pc, #416]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ec:	619a      	str	r2, [r3, #24]
    g_hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2238      	movs	r2, #56	; 0x38
 80020f4:	61da      	str	r2, [r3, #28]
    g_hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020f6:	4b64      	ldr	r3, [pc, #400]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
    g_hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80020fe:	4b62      	ldr	r3, [pc, #392]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	625a      	str	r2, [r3, #36]	; 0x24
    g_hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002106:	4b60      	ldr	r3, [pc, #384]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	629a      	str	r2, [r3, #40]	; 0x28
    g_hspi->Init.CRCPolynomial = 10;
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	220a      	movs	r2, #10
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(g_hspi);
 8002116:	4b5c      	ldr	r3, [pc, #368]	; (8002288 <DOT_MATRIX_Init+0x2f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fb56 	bl	80017cc <HAL_SPI_Init>

    /*--------[ Initialize & Configure The MAX7219 Devices ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002126:	e144      	b.n	80023b2 <DOT_MATRIX_Init+0x41a>
    {
    	// Set BCD Decode Mode
    	SS_ENABLE(i);
 8002128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fed5 	bl	8001edc <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8002132:	2300      	movs	r3, #0
 8002134:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002138:	e00a      	b.n	8002150 <DOT_MATRIX_Init+0x1b8>
    	{
    	    SPI_TX_Byte(0x09);
 800213a:	2009      	movs	r0, #9
 800213c:	f7ff febc 	bl	8001eb8 <SPI_TX_Byte>
    	    SPI_TX_Byte(0x00);
 8002140:	2000      	movs	r0, #0
 8002142:	f7ff feb9 	bl	8001eb8 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8002146:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800214a:	3301      	adds	r3, #1
 800214c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002150:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002154:	494d      	ldr	r1, [pc, #308]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	3308      	adds	r3, #8
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002168:	429a      	cmp	r2, r3
 800216a:	d3e6      	bcc.n	800213a <DOT_MATRIX_Init+0x1a2>
    	}
    	SS_DISABLE(i);
 800216c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fed3 	bl	8001f1c <SS_DISABLE>
    	// Set Dot Matrix Unit Brightness
    	SS_ENABLE(i);
 8002176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff feae 	bl	8001edc <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8002180:	2300      	movs	r3, #0
 8002182:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002186:	e014      	b.n	80021b2 <DOT_MATRIX_Init+0x21a>
    	{
    		SPI_TX_Byte(0x0A); // Select Intensity register
 8002188:	200a      	movs	r0, #10
 800218a:	f7ff fe95 	bl	8001eb8 <SPI_TX_Byte>
    		SPI_TX_Byte(DOT_MATRIX_CfgParam[i].BRIGHTNESS);
 800218e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002192:	493e      	ldr	r1, [pc, #248]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	3309      	adds	r3, #9
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fe88 	bl	8001eb8 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80021a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021ac:	3301      	adds	r3, #1
 80021ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80021b6:	4935      	ldr	r1, [pc, #212]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3308      	adds	r3, #8
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d3dc      	bcc.n	8002188 <DOT_MATRIX_Init+0x1f0>
    	}
    	SS_DISABLE(i);
 80021ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fea2 	bl	8001f1c <SS_DISABLE>
    	// Set Display Refresh
    	SS_ENABLE(i);
 80021d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fe7d 	bl	8001edc <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80021e8:	e00a      	b.n	8002200 <DOT_MATRIX_Init+0x268>
    	{
    		SPI_TX_Byte(0x0B); // Select Scan-Limit register
 80021ea:	200b      	movs	r0, #11
 80021ec:	f7ff fe64 	bl	8001eb8 <SPI_TX_Byte>
    		SPI_TX_Byte(0x07); // 1-7
 80021f0:	2007      	movs	r0, #7
 80021f2:	f7ff fe61 	bl	8001eb8 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80021f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80021fa:	3301      	adds	r3, #1
 80021fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002200:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002204:	4921      	ldr	r1, [pc, #132]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	3308      	adds	r3, #8
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002218:	429a      	cmp	r2, r3
 800221a:	d3e6      	bcc.n	80021ea <DOT_MATRIX_Init+0x252>
    	}
    	SS_DISABLE(i);
 800221c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fe7b 	bl	8001f1c <SS_DISABLE>
    	// Turn ON The Display
    	SS_ENABLE(i);
 8002226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe56 	bl	8001edc <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8002230:	2300      	movs	r3, #0
 8002232:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002236:	e00a      	b.n	800224e <DOT_MATRIX_Init+0x2b6>
    	{
    		SPI_TX_Byte(0x0C);
 8002238:	200c      	movs	r0, #12
 800223a:	f7ff fe3d 	bl	8001eb8 <SPI_TX_Byte>
    		SPI_TX_Byte(0x01);
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff fe3a 	bl	8001eb8 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8002244:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002248:	3301      	adds	r3, #1
 800224a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800224e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002252:	490e      	ldr	r1, [pc, #56]	; (800228c <DOT_MATRIX_Init+0x2f4>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	3308      	adds	r3, #8
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002266:	429a      	cmp	r2, r3
 8002268:	d3e6      	bcc.n	8002238 <DOT_MATRIX_Init+0x2a0>
    	}
    	SS_DISABLE(i);
 800226a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fe54 	bl	8001f1c <SS_DISABLE>
    	// Disable Display Test
    	SS_ENABLE(i);
 8002274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fe2f 	bl	8001edc <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800227e:	2300      	movs	r3, #0
 8002280:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002284:	e017      	b.n	80022b6 <DOT_MATRIX_Init+0x31e>
 8002286:	bf00      	nop
 8002288:	20000270 	.word	0x20000270
 800228c:	08002558 	.word	0x08002558
 8002290:	40021000 	.word	0x40021000
 8002294:	48000400 	.word	0x48000400
 8002298:	48000800 	.word	0x48000800
 800229c:	40013000 	.word	0x40013000
    	{
    		SPI_TX_Byte(0x0F);
 80022a0:	200f      	movs	r0, #15
 80022a2:	f7ff fe09 	bl	8001eb8 <SPI_TX_Byte>
    		SPI_TX_Byte(0x00);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7ff fe06 	bl	8001eb8 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80022ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80022b0:	3301      	adds	r3, #1
 80022b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80022b6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80022ba:	4943      	ldr	r1, [pc, #268]	; (80023c8 <DOT_MATRIX_Init+0x430>)
 80022bc:	4613      	mov	r3, r2
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3308      	adds	r3, #8
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d3e6      	bcc.n	80022a0 <DOT_MATRIX_Init+0x308>
    	}
    	SS_DISABLE(i);
 80022d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fe20 	bl	8001f1c <SS_DISABLE>

        // Initialize The Global Structure
        gs_MATRIX_info[i].Ticks = 0;
 80022dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80022e0:	493a      	ldr	r1, [pc, #232]	; (80023cc <DOT_MATRIX_Init+0x434>)
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
        gs_MATRIX_info[i].BufferInit = 0;
 80022f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80022f4:	4935      	ldr	r1, [pc, #212]	; (80023cc <DOT_MATRIX_Init+0x434>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	330b      	adds	r3, #11
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Arr_Index = 0;
 8002306:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800230a:	4930      	ldr	r1, [pc, #192]	; (80023cc <DOT_MATRIX_Init+0x434>)
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3308      	adds	r3, #8
 8002318:	2200      	movs	r2, #0
 800231a:	801a      	strh	r2, [r3, #0]
        gs_MATRIX_info[i].Col_Index = 0;
 800231c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002320:	492a      	ldr	r1, [pc, #168]	; (80023cc <DOT_MATRIX_Init+0x434>)
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	330a      	adds	r3, #10
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Max_Ticks = DOT_MATRIX_CfgParam[i].SCROLL_SPEED;
 8002332:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002336:	4924      	ldr	r1, [pc, #144]	; (80023c8 <DOT_MATRIX_Init+0x430>)
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3306      	adds	r3, #6
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800234a:	4618      	mov	r0, r3
 800234c:	491f      	ldr	r1, [pc, #124]	; (80023cc <DOT_MATRIX_Init+0x434>)
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	3304      	adds	r3, #4
 800235a:	6018      	str	r0, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 800235c:	2300      	movs	r3, #0
 800235e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002362:	e012      	b.n	800238a <DOT_MATRIX_Init+0x3f2>
        {
        	gs_MATRIX_info[i].Buffer[j] = 0x00;
 8002364:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002368:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800236c:	4817      	ldr	r0, [pc, #92]	; (80023cc <DOT_MATRIX_Init+0x434>)
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4403      	add	r3, r0
 8002378:	440b      	add	r3, r1
 800237a:	330c      	adds	r3, #12
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8002380:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002384:	3301      	adds	r3, #1
 8002386:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800238a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800238e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002392:	480d      	ldr	r0, [pc, #52]	; (80023c8 <DOT_MATRIX_Init+0x430>)
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4403      	add	r3, r0
 800239e:	3308      	adds	r3, #8
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4299      	cmp	r1, r3
 80023a6:	dbdd      	blt.n	8002364 <DOT_MATRIX_Init+0x3cc>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80023a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023ac:	3301      	adds	r3, #1
 80023ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80023b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f43f aeb6 	beq.w	8002128 <DOT_MATRIX_Init+0x190>
        }
    }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3730      	adds	r7, #48	; 0x30
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	08002558 	.word	0x08002558
 80023cc:	20000274 	.word	0x20000274

080023d0 <MATRIX_CLEAR>:
{
	gs_MATRIX_info[au8_MATRIX_Instance].Max_Ticks = au16_SPEED;
}

void MATRIX_CLEAR(uint8_t au8_MATRIX_Instance)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0, col = 1;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	2301      	movs	r3, #1
 80023e0:	73bb      	strb	r3, [r7, #14]

	for(i = 0; i<DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	e011      	b.n	800240c <MATRIX_CLEAR+0x3c>
	{
		for(col = 1; col < 9; col++)
 80023e8:	2301      	movs	r3, #1
 80023ea:	73bb      	strb	r3, [r7, #14]
 80023ec:	e008      	b.n	8002400 <MATRIX_CLEAR+0x30>
		{
			TxByte(au8_MATRIX_Instance, col, 0x00);
 80023ee:	7bb9      	ldrb	r1, [r7, #14]
 80023f0:	79fb      	ldrb	r3, [r7, #7]
 80023f2:	2200      	movs	r2, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fdb1 	bl	8001f5c <TxByte>
		for(col = 1; col < 9; col++)
 80023fa:	7bbb      	ldrb	r3, [r7, #14]
 80023fc:	3301      	adds	r3, #1
 80023fe:	73bb      	strb	r3, [r7, #14]
 8002400:	7bbb      	ldrb	r3, [r7, #14]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d9f3      	bls.n	80023ee <MATRIX_CLEAR+0x1e>
	for(i = 0; i<DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3301      	adds	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	79fa      	ldrb	r2, [r7, #7]
 800240e:	4908      	ldr	r1, [pc, #32]	; (8002430 <MATRIX_CLEAR+0x60>)
 8002410:	4613      	mov	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3308      	adds	r3, #8
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	429a      	cmp	r2, r3
 8002422:	d3e1      	bcc.n	80023e8 <MATRIX_CLEAR+0x18>
		}
	}
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	08002558 	.word	0x08002558

08002434 <MATRIX_Write_Char>:

void MATRIX_Write_Char(uint8_t au8_MATRIX_Instance, uint8_t myChar)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	460a      	mov	r2, r1
 800243e:	71fb      	strb	r3, [r7, #7]
 8002440:	4613      	mov	r3, r2
 8002442:	71bb      	strb	r3, [r7, #6]
    uint8_t Column = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
    uint8_t FONT_W = 5;
 8002448:	2305      	movs	r3, #5
 800244a:	73bb      	strb	r3, [r7, #14]

    TxByte(au8_MATRIX_Instance, Column, 0x00);
 800244c:	7bf9      	ldrb	r1, [r7, #15]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	2200      	movs	r2, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fd82 	bl	8001f5c <TxByte>
    for(Column=2; Column<=FONT_W+1; Column++)
 8002458:	2302      	movs	r3, #2
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e013      	b.n	8002486 <MATRIX_Write_Char+0x52>
    {
    	TxByte(au8_MATRIX_Instance, Column, FONT_7x5[myChar-32][Column-2]);
 800245e:	79bb      	ldrb	r3, [r7, #6]
 8002460:	f1a3 0220 	sub.w	r2, r3, #32
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	1e99      	subs	r1, r3, #2
 8002468:	480e      	ldr	r0, [pc, #56]	; (80024a4 <MATRIX_Write_Char+0x70>)
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	4403      	add	r3, r0
 8002472:	440b      	add	r3, r1
 8002474:	781a      	ldrb	r2, [r3, #0]
 8002476:	7bf9      	ldrb	r1, [r7, #15]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fd6e 	bl	8001f5c <TxByte>
    for(Column=2; Column<=FONT_W+1; Column++)
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3301      	adds	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	7bbb      	ldrb	r3, [r7, #14]
 800248a:	3301      	adds	r3, #1
 800248c:	429a      	cmp	r2, r3
 800248e:	dde6      	ble.n	800245e <MATRIX_Write_Char+0x2a>
    }
    TxByte(au8_MATRIX_Instance, Column, 0x00);
 8002490:	7bf9      	ldrb	r1, [r7, #15]
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2200      	movs	r2, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fd60 	bl	8001f5c <TxByte>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <__libc_init_array>:
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	4d0d      	ldr	r5, [pc, #52]	; (80024e0 <__libc_init_array+0x38>)
 80024ac:	4c0d      	ldr	r4, [pc, #52]	; (80024e4 <__libc_init_array+0x3c>)
 80024ae:	1b64      	subs	r4, r4, r5
 80024b0:	10a4      	asrs	r4, r4, #2
 80024b2:	2600      	movs	r6, #0
 80024b4:	42a6      	cmp	r6, r4
 80024b6:	d109      	bne.n	80024cc <__libc_init_array+0x24>
 80024b8:	4d0b      	ldr	r5, [pc, #44]	; (80024e8 <__libc_init_array+0x40>)
 80024ba:	4c0c      	ldr	r4, [pc, #48]	; (80024ec <__libc_init_array+0x44>)
 80024bc:	f000 f820 	bl	8002500 <_init>
 80024c0:	1b64      	subs	r4, r4, r5
 80024c2:	10a4      	asrs	r4, r4, #2
 80024c4:	2600      	movs	r6, #0
 80024c6:	42a6      	cmp	r6, r4
 80024c8:	d105      	bne.n	80024d6 <__libc_init_array+0x2e>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80024d0:	4798      	blx	r3
 80024d2:	3601      	adds	r6, #1
 80024d4:	e7ee      	b.n	80024b4 <__libc_init_array+0xc>
 80024d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024da:	4798      	blx	r3
 80024dc:	3601      	adds	r6, #1
 80024de:	e7f2      	b.n	80024c6 <__libc_init_array+0x1e>
 80024e0:	08002564 	.word	0x08002564
 80024e4:	08002564 	.word	0x08002564
 80024e8:	08002564 	.word	0x08002564
 80024ec:	08002568 	.word	0x08002568

080024f0 <memset>:
 80024f0:	4402      	add	r2, r0
 80024f2:	4603      	mov	r3, r0
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d100      	bne.n	80024fa <memset+0xa>
 80024f8:	4770      	bx	lr
 80024fa:	f803 1b01 	strb.w	r1, [r3], #1
 80024fe:	e7f9      	b.n	80024f4 <memset+0x4>

08002500 <_init>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr

0800250c <_fini>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr
